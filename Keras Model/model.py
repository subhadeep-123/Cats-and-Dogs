# -*- coding: utf-8 -*-
"""Cats or Dogs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZmioUsoUWuLdj45JarvdW7GmQyYptCeH
"""

!wget https://sds-platform-private.s3-us-east-2.amazonaws.com/uploads/P16-Convolutional-Neural-Networks.zip

from zipfile import ZipFile 

file_name = "P16-Convolutional-Neural-Networks.zip"
# opening the zip file in READ mode 
with ZipFile(file_name, 'r') as zip: 
    # printing all the contents of the zip file 
    zip.printdir() 
    # extracting all the files 
    zip.extractall()
    # Closing the zip
    zip.close()

import os
print(os.getcwd())
os.chdir('/content/Convolutional_Neural_Networks/dataset')
print(os.getcwd())
os.listdir()

#Declaration of parameters needed for training and validation
train_data_dir =('training_set')
test_data_dir =('test_set')

from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.layers import Flatten
from keras.layers import Dense
from keras.optimizers import Adam
from keras.layers import Dropout
from keras.preprocessing.image import ImageDataGenerator

# Initialising the CNN
model = Sequential()

# 1st convolution and pooling payer
#Convolution Layer
model.add(Conv2D(32, 
                 (3, 3), 
                 activation = 'relu',
                 padding='same',
                 input_shape = (128, 128, 3)))
#Maxpooling Layer
model.add(MaxPooling2D(pool_size=(2, 2)))


# 2nd convolution and pooling payer
#Convolution Layer
model.add(Conv2D(32, 
                 (3, 3), 
                 padding='same',
                 activation = 'relu'))
#Maxpooling Layer
model.add(MaxPooling2D(pool_size=(2, 2)))


# 3rd convolution and pooling payer
#Convolution Layer
model.add(Conv2D(32, 
                 (3, 3), 
                 padding='same',
                 activation = 'relu'))
#Maxpooling Layer
model.add(MaxPooling2D(pool_size=(2, 2)))


#Flattening
model.add(Flatten())


# Fully Dense connection
model.add(Dense(64, 
                activation='relu'))

model.add(Dropout(p=0.6))

model.add(Dense(64, 
                activation='relu'))

model.add(Dense(64, 
                activation='relu'))

model.add(Dropout(p=0.3))

model.add(Dense(1, 
                activation='sigmoid'))


#Compile the model
adam= Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)
model.compile(loss='binary_crossentropy',optimizer=adam, metrics=['accuracy'])
model.summary()

#Trainning Agementation
train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

training_set = train_datagen.flow_from_directory(train_data_dir,
                                                 target_size = (128, 128),
                                                 batch_size = 32,
                                                 class_mode = 'binary')

#Test Agementation
test_datagen = ImageDataGenerator(rescale = 1./255)

test_set = test_datagen.flow_from_directory(test_data_dir,
                                            target_size = (128, 128),
                                            batch_size = 32,
                                            class_mode = 'binary')

epochs = 10
model.fit_generator(training_set,
                    steps_per_epoch = 8000,
                    epochs = epochs,
                    validation_data = test_set,
                    validation_steps = 2000)

from keras.models import load_model
model.save("cats_and_dogs.h5")

import matplotlib.pyplot as plt
# %matplotlib inline
history = model.history
# Plot training & validation accuracy values
plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# Plot training & validation loss values
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper left')
plt.show()

# Part 3 - Making new predictions

import numpy as np
from keras.preprocessing import image
test_image = image.load_img('./single_prediction/cat_or_dog_2.jpg', 
                            target_size = (128, 128))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
result = model.predict(test_image)
training_set.class_indices
if result[0][0] == 1:
    prediction = 'dog'
    print(prediction)
else:
    prediction = 'cat'
    print(prediction)

print('Train',model.history.history['acc'][9] * 100)
print('Test',model.history.history['val_acc'][9] * 100)

